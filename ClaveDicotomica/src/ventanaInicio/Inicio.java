/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ventanaInicio;
import clavedicotomica.leerJson;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import clavedicotomica.Arbol;
import clavedicotomica.TablaDispersion;
import clavedicotomica.GraficoArbol;
import clavedicotomica.Nodo;
/**
 *
 * @author jesus
 */
public class Inicio extends javax.swing.JFrame {
    private Arbol arbol; // Árbol para la clave dicotómica
    private TablaDispersion tabla; // Tabla de dispersión para las especies
    /**
     * Creates new form Inicio
     */
    public Inicio() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        cargarJson = new javax.swing.JButton();
        Grafo = new javax.swing.JButton();
        determinarEspecie = new javax.swing.JButton();
        buscarEspecie = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cargarJson.setText("Cargar Json");
        cargarJson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarJsonActionPerformed(evt);
            }
        });

        Grafo.setText("Mostrar Grafo");
        Grafo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GrafoActionPerformed(evt);
            }
        });

        determinarEspecie.setText("Determinar especie");
        determinarEspecie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                determinarEspecieActionPerformed(evt);
            }
        });

        buscarEspecie.setText("Buscar especie");
        buscarEspecie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarEspecieActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(determinarEspecie, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                    .addComponent(cargarJson, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 74, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Grafo, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscarEspecie, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cargarJson, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Grafo, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(determinarEspecie, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscarEspecie, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void GrafoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GrafoActionPerformed
        if (arbol != null) {
            GraficoArbol.mostrarArbol(arbol.getRaiz());
        } else {
            JOptionPane.showMessageDialog(this, "Primero carga un archivo JSON.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    

    }//GEN-LAST:event_GrafoActionPerformed

    private void cargarJsonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarJsonActionPerformed
          
            // Crear una instancia de JFileChooser
        JFileChooser fileChooser = new JFileChooser();

        // Mostrar el diálogo para abrir un archivo
        int seleccion = fileChooser.showOpenDialog(null);

        // Verificar si el usuario seleccionó un archivo
        if (seleccion == JFileChooser.APPROVE_OPTION) {
            // Obtener el archivo seleccionado
            File archivoSeleccionado = fileChooser.getSelectedFile();

            // Obtener la extensión del archivo
            String nombreArchivo = archivoSeleccionado.getName();
            String extension = "";

            // Obtener la extensión del archivo
            int i = nombreArchivo.lastIndexOf('.');
            if (i > 0) {
                extension = nombreArchivo.substring(i + 1).toLowerCase();
            }

            // Verificar si la extensión es "json"
            if ("json".equals(extension)) {
                // Mostrar la ruta del archivo seleccionado
                JOptionPane.showMessageDialog(this, "Archivo seleccionado: " + archivoSeleccionado.getAbsolutePath(), "Cargar Json", JOptionPane.INFORMATION_MESSAGE);

                // Construir el árbol y la tabla de dispersión
                tabla = new TablaDispersion();
                arbol = leerJson.construirArbol(archivoSeleccionado, tabla);

                if (arbol != null) {
                    JOptionPane.showMessageDialog(this, "Árbol y tabla de dispersión construidos correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "Error al construir el árbol.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                // Mostrar un mensaje de error si el archivo no es JSON
                JOptionPane.showMessageDialog(this, "El archivo seleccionado no es un archivo JSON.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "No se ha seleccionado ningún archivo.", "Error", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_cargarJsonActionPerformed

    private void determinarEspecieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_determinarEspecieActionPerformed
        if (arbol == null) {
        JOptionPane.showMessageDialog(this, "Primero carga un archivo JSON.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        return;
    }

    // Comenzar desde la raíz
    Nodo nodoActual = arbol.getRaiz();
    
    // Mientras no se llegue a una hoja (especie)
    while (nodoActual != null && nodoActual.getEspecie() == null) {
        // Mostrar la pregunta actual
        int respuesta = JOptionPane.showConfirmDialog(
            this,
            nodoActual.getPregunta(),
            "Determinar Especie",
            JOptionPane.YES_NO_OPTION
        );
        
        // Avanzar según la respuesta
        if (respuesta == JOptionPane.YES_OPTION) {
            nodoActual = nodoActual.getSi();
        } else {
            nodoActual = nodoActual.getNo();
        }
        
        // Verificar si se llegó a un nodo nulo (camino incompleto)
        if (nodoActual == null) {
            JOptionPane.showMessageDialog(
                this,
                "No se pudo determinar la especie. El árbol está incompleto.",
                "Error",
                JOptionPane.ERROR_MESSAGE
            );
            return;
        }
    }
    
    // Mostrar la especie encontrada
    if (nodoActual != null && nodoActual.getEspecie() != null) {
        JOptionPane.showMessageDialog(
            this,
            "La especie determinada es: " + nodoActual.getEspecie(),
            "Especie Encontrada",
            JOptionPane.INFORMATION_MESSAGE
        );
    } else {
        JOptionPane.showMessageDialog(
            this,
            "No se pudo determinar la especie.",
            "Error",
            JOptionPane.ERROR_MESSAGE
        );
    }

    }//GEN-LAST:event_determinarEspecieActionPerformed

    private void buscarEspecieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarEspecieActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_buscarEspecieActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Inicio().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Grafo;
    private javax.swing.JButton buscarEspecie;
    private javax.swing.JButton cargarJson;
    private javax.swing.JButton determinarEspecie;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
